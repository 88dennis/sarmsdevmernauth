npm install express-generator
express --view=hbs <yourapp> && cd <yourapp>

npm install -> to install dependencies

npx create-react-app client

==============================================================
delete some stuff so your server would look like this:

const express = require('express');
// const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');

const indexRouter = require('./routes/index');
const usersRouter = require('./routes/users');
const PORT = process.env.PORT || 8080;
const log = console.log;

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

app.use('/', indexRouter);
app.use('/users', usersRouter);


app.listen(PORT, ()=> {
  log(`Server connected to http://localhost:${PORT}`)
})
module.exports = app;

==============================================================
delete some stuff so your routes/index.js would looklike this:
var express = require('express');
var router = express.Router();

/* GET home page. */
// router.get('/', function(req, res, next) {
//   res.render('index', { title: 'Express' });
// });

/* GET home page. */
router.get('/', function(req, res, next) {
  res.json({ title: 'Express' });
});

module.exports = router;


==============================================================
update your package.json:
"scripts": {
    "start": "nodemon app.js"
  },


==============================================================
update your package.json (client):
  "proxy":"http://localhost:8080" -> should be same with server port



==============================================================
set up your frontend app.js
npm install axios react-router-dom --save -> in client

import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Dashboard from "./components/Dashboard"
import Login from "./components/Login"
import Profile from "./components/Profile"
import Signup from "./components/Signup"
import Home from "./components/Home"
import NotFound from "./components/NotFound"

class App extends Component {
  render() {
    return (
      <Router>
        <div>
          <Switch>
            <Route exact path="/" component={Home}/>
            <Route path="/profile" component={Profile}/>
            <Route path="/dashboard" component={Dashboard}/>
            <Route path="/signup" component={Signup}/>
            <Route path="/login" component={Login}/>
            <Route path="*" c omponent={NotFound} />
          </Switch>
        </div>
      </Router>
      
    )
  }
}

export default App;

==============================================


PASSPORT
in root folder (./)
npm install passport-local passport cookie-session -S
create a folder named passport

https://github.com/accimeesterlin/passport-examples

create files
index.js
SigninStrategy.js
SignupStrategy.js

=====================================
in index.js:
const passport = require('passport');

//import all Strategies
const SigninStrategy = require("./SigninStrategy");
const SignupStrategy = require("./SignupStrategy");

//"local-signin can be anyname"
passport.use('local-signin', SigninStrategy);
passport.use('local-signup', SignupStrategy);

module.exports = passport;
=====================================

in the Strategy.js

const Strategy = require('passport-local').Strategy;
// const User = require('../models/user')

const SignupStrategy = new Strategy({ passReqToCallback: true},function(req, username, password, done){

const info = req.body;
const user = {username, password};
console.log(user);
//done() takes in 3 params -> error or null, {username: '', age: 5}, {extra data}
done(null, user, info);

    //what should happen if user signs in
    //   User.findOne({ username: username }, function (err, user) {
    //     if (err) { return done(err); }
    //     if (!user) { return done(null, false); }
    //     if (!user.verifyPassword(password)) { return done(null, false); }
    //     return done(null, user);
    //   });
});

module.exports = SignupStrategy;
==========================================

in signup route:
router.post('/signup', (req, res, next)=>{

  passport.authenticate('local-signup', function(error, user, info){
    if(error){
      return res.status(500).json({
        message: "Something Happened",
        error: error.message || 'internal server error'
      });
    }
    console.log("asdasdas", user);
    console.log("asdasdas", info);

   return res.json({
      message: "user authenticated"
    });
  })(req, res, next)

});

=====================================

THEN INSTALL BCRYPTJS
npm install bcryptjs

strategy.js will looklike this:
const Strategy = require('passport-local').Strategy;
const User = require('../models/user');
const bcrypt = require('bcryptjs');
const salt = bcrypt.genSaltSync(10);

const SignupStrategy = new Strategy({ passReqToCallback: true},function(req, username, password, done){
    const email = req.body.email;
    // console.log(email);
    // done(null, email, "someinfo");

    User.findOne({
        email: email
    }).lean().exec((err, user) => {
        if (err) {
            return done(err, null);
        }
        if (user) {
            return done("User already exist", null);
        }
        const encryptedPassword = bcrypt.hashSync(password, salt);

        let newUser = new User({
           email: email,
           password: encryptedPassword
        });

        console.log("FROM SIGNUPSTRATEGY :", newUser);
        // done(null, newUser)

        // newUser.save((error, insertedUser) => {
        //     if (error) {
        //         return done(error, null);
        //     }

        //     return done(null, insertedUser);
        // });
    });
});

module.exports = SignupStrategy;
=======================================

//REDIRECT TO
import { Redirect } from "react-router-dom";
 render() {
    if (this.state.redirectTo) {
      return <Redirect to={{ pathname: this.state.redirectTo }} />;
    }
    return <>{this.renderSignUpAndLoginForm()}</>;
  }

  <Route path="/test/new" render={(props) => <NewTestComp {...props}/>}/>

<Redirect
            to={{
            pathname: "/test/new",
            state: { property_id: property_id }
          }}
        />



ENCRYPT/ DECRYPT
https://www.npmjs.com/package/cryptr
npm install cryptr

Usage
const Cryptr = require('cryptr');
const cryptr = new Cryptr('myTotalySecretKey');
 
const encryptedString = cryptr.encrypt('bacon');
const decryptedString = cryptr.decrypt(encryptedString);
 
console.log(encryptedString); // e7b75a472b65bc4a42e7b3f78833a4d00040beba796062bf7c13d9533b149e5ec3784813dc20348fdf248d28a2982df85b83d1109623bce45f08238f6ea9bd9bb5f406427b2a40f969802635b8907a0a57944f2c12f334bd081d5143a357c173a611e1b64a
console.log(decryptedString); // bacon


========================


JSON WEB TOKEN
npm install jsonwebtoken -S

PASSPORT WILL LOOK LIKE THIS:
const passport = require('passport');
const User = require('../models/user');


// //ADDS THE USER TO THE SESSION
// passport.serializeUser(function(user, done) {
//     console.log("serialized", user)
//     done(null, user._id);
//   });
//   //Every single route the user is going this will check if it contains the id that we added to our serialize
//   passport.deserializeUser(function(id, done) {

//     User.findById(id, function (err, user) {
//       done(err, user);
//     });
//   });


//IN THIS CASE WE USE THE EMAIL AS ID
passport.serializeUser(function(user, done) {
    console.log("SERIALIZED USER: ", user)
    done(null, user.email); 
  });
  
  //Every single route the user is going this will check if it contains the id that we added to our serialize
  passport.deserializeUser( function(email, done) {
    User.findOne({email: email})
        .then((user)=>{
            console.log("DESERIALIZED USER: ", user);
            user.isAuthenticated = true;
            done(null, user)
        })
        .catch((error)=>{
            done(error, null)
            // console.log(error)
        });
  });


//import all Strategies 
const SigninStrategy = require("./SigninStrategy");
const SignupStrategy = require("./SignupStrategy");
const { response } = require('express');

//"local-signin can be anyname"
passport.use('local-signin', SigninStrategy);
passport.use('local-signup', SignupStrategy);

module.exports = passport;


SIGNIN STRATEGY WILL LOOK LIKE THIS:
const Strategy = require('passport-local').Strategy;
const User = require('../models/user');
const bcrypt = require('bcryptjs');
// const salt = bcrypt.genSaltSync(10);

const LoginStrategy = new Strategy({ passReqToCallback: true, usernameField: 'email'}, async function(req, email, password, done){
        await User.findOne({
            email: email
        })
        .then((existingUser) => {
            if (!existingUser) {
                console.log("NO USER FOUND!!!!!!!!!!!!");
                return done("User does not exist. Please Signup.", null);
            } else {
                    console.log("USER FOUND!!!!!!!!!!!! CHECKING PASSWORD");
                 //from bcryptjs documentation -> if password sent is the same with existing
                    const isPasswordValid = bcrypt.compareSync(password, existingUser.password);
                    console.log(isPasswordValid);
                    if(!isPasswordValid){
                         console.log("PASSWORD INVALID!!!!!!!!!!!!!!!!!!");
                        return done('Email or Password not valid', null);
                    }
                    console.log("OK!!!!!!!!!!!!!!!!!!!");
                    return done(null, existingUser, 'Some info');
            }
        })
        .catch((error)=>{
                return done(error, null);
        });
    });
    
    module.exports = LoginStrategy;

    SIGNUP STRATEGY WILL LOOK LIKE THIS:
    const Strategy = require('passport-local').Strategy;
const User = require('../models/user');
const bcrypt = require('bcryptjs');
const salt = bcrypt.genSaltSync(10);

const SignupStrategy = new Strategy({ passReqToCallback: true, usernameField: 'email'}, async function(req, email, password, done){

// const SignupStrategy = new Strategy({ passReqToCallback: true},function(req, username, password, done){
    // const email = req.body.email;
    // console.log(email);
    // done(null, email, "someinfo");
    await User.findOne({
        email: email
    })
    .then((user) => {

        console.log("ASDOIASDINAOSDNAOSDINOADSINOADSDIASN ", user);
           if (user) {
        console.log("IMTHEUSER!!!!!!!!!!!!!! ", user)
               console.log("USEREXIST");
                return done('User already exist', null);
            } else {
            const encryptedPassword = bcrypt.hashSync(password, salt);
            //========================
            //ANOTHER WAY TO CREATE -MONGOOSE DOX
                User.create({
                    email: email,
                    password: encryptedPassword,
                    bio: req.body.bio
                }, function(err, insertedUser){
                    if(err){
                        console.log(err);
                        return done(err, null);
                    } else {
                        console.log("SAVED TO THE DB ", insertedUser);
                    return done(null, insertedUser);
                    }
                });
            }
    })
    .catch((error)=>{
            return done(error, null);
    });
   
});

module.exports = SignupStrategy;


USERS ROUTE WILL LOOK LIKE THIS:
const express = require('express');
const router = express.Router();
const passport = require('../passport');
const User = require('../models/user');

// passport.authenticate('local-signup', ()=> {

// })

//STANDARD PASSPORT
// router.post('/signup', passport.authenticate('local-signup', {
//   successRedirect: '/',
//   failureRedirect: '/home',
//   //disable session
//   session: false
// }));

//CUSTOM PASSPORT CALLBACK FOR REACT -> will send json
router.post('/signup', async (req, res, next)=>{
  //the callback function here is the done() method in the signup strategy
  await passport.authenticate('local-signup', function(error, user, info){
    if(error){
      // return res.json(error);
      return res.status(500).json(error);
    }
    // console.log("This came from routes/users ", user);
    // console.log("This came from routes/users ", info);

    //THIS IS LINKED TO THE SIGNUP STRATEGY DONE() METHOD
    // return res.json(user);

    //USING COOKIE SESSION -> PERSISTENT LOGIN
    req.logIn(user, function(error){
      if(error){
        return res.status(500).json(error);
      }

      user.isAuthenticated = true;

      console.log("FROM COOKIE SESSION: ", user);
      // if(req.user){
      //   console.log("REQUSERRRRRRRRR ", req.user.email)
      // }

    return res.json({
      isAuthenticated: true,
      email: user.email,
      bio: user.bio
    });
    });

  //  return res.json({
  //     message: "user authenticated"
  //   });
  })(req, res, next)

});


router.post('/signin', async (req, res, next)=>{

  //the callback function here is the done() method in the signup strategy
   await passport.authenticate('local-signin', function(error, user, info){
    if(error){
      // return res.json(error)
      return res.status(500).json(error);
    }
    // console.log("This came from routes/users ", user);
    // console.log("This came from routes/users ", info);
    
    //THIS IS LINKED TO THE SIGNUP STRATEGY DONE() METHOD
    // return res.json(user);


    //USING COOKIE SESSION -> PERSISTENT LOGIN
    req.logIn(user, function(error){
      if(error){
        return res.status(500).json(error);
      }
      // console.log("FROM COOKIE SESSION: ", user);
      // if(req.user){
      //   console.log("REQUSERRRRRRRRR ", req.user.email)
      // }
      // user.isAuthenticated = true;
      // console.log("FROM COOKIE SESSION: ", user.email);
    return res.json({
      isAuthenticated: true,
      email: user.email,
      bio: user.bio
    });
    });

  //  return res.json({
  //     message: "user authenticated"
  //   });
  })(req, res, next)

});

router.post('/check', function(req, res, next) {
  console.log(req.body.email)
  res.json('respond with a resource');
});

router.get('/check', async function(req, res, next) {
  //FROM PASSPORT DESERIALIZE, THE req.user will be available to you or the req.session.passport.session
  if (req.user){
    console.log("there is a user");
    console.log("REQUSER ", req.user);
  console.log("REQUSER2 ", req.session.passport);
  }
  
  // let userOne="";
  const userInfo = await User.collection.findOne({email: req.user.email }); //-> will return an object
  // const userInfo = await User.findOne({email: "dennis@dennis.com" }) //-> will return an object
  // const userInfo = await User.find({email: "dennis@dennis.com" }) //-> will return an array
  // const userInfo = await User.collection.find({email: "dennis@dennis.com" }).toArray();
  console.log(userInfo);

  await User.collection.updateOne({email: userInfo.email}, {'$set': {
    bio: "softeasdasd"
  }});

  const updatedUserInfo = await User.collection.findOne({email:userInfo.email});
  res.json(updatedUserInfo.bio);
});

/* GET users listing. */
router.get('/', function(req, res, next) {

  res.send('respond with a resource');
});

module.exports = router;


SERVER WILL LOOK LIKE THIS:
const express = require('express');
const mongoose = require('mongoose');
// const path = require('path');
// const cookieParser = require('cookie-parser');
const cookieSession = require('cookie-session');
const logger = require('morgan');
const passport = require('./passport');
const indexRouter = require('./routes/index');
const usersRouter = require('./routes/users');
const apiRouter = require('./routes/api')

const PORT = process.env.PORT || 8080;
const log = console.log;
const app = express();

mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/mernauth', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});
mongoose.connection.on('connected', ()=>{
  log('Mongoose is connected');
});

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
// app.use(cookieParser());
app.use(cookieSession({
  name: 'session',
  keys: ['key1', 'key2']
}));
app.use(passport.initialize());
app.use(passport.session());


app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use("/api", apiRouter);


app.listen(PORT, ()=> {
  log(`Server connected to http://localhost:${PORT}`)
})
module.exports = app;


BACKEND PACKAGE JSON:
{
  "name": "mernauth",
  "version": "0.0.0",
  "private": true, ------>>>>>> means you npm will refuse to publish this
  "scripts": {
    "start": "nodemon app.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cookie-parser": "~1.4.4",
    "cookie-session": "^1.4.0",
    "debug": "~2.6.9",
    "express": "~4.16.1",
    "hbs": "^4.1.1",
    "http-errors": "~1.6.3",
    "jsonwebtoken": "^8.5.1",
    "mongoose": "^5.9.29",
    "morgan": "~1.9.1",
    "passport": "^0.4.1",
    "passport-local": "^1.0.0"
  }
}
